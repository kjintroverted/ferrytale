{"version":3,"sources":["components/IGBackground.js","App.js","serviceWorker.js","index.js"],"names":["IGBackground","username","quality","filterOpts","offset","useState","imageResources","setImages","imageDims","setImageDims","topOffSet","setOffSet","getImageDims","length","Math","sqrt","window","innerHeight","innerWidth","useEffect","a","fetch","resp","json","graphql","user","edge_owner_to_timeline_media","edges","map","node","thumbnail_resources","getMedia","addEventListener","scrollY","Container","styled","div","Tile","Filter","join","res","key","src","Post","alt","img","App","Content","AppBar","color","Toolbar","Logo","Typography","variant","Spacer","IconButton","href","className","Banner","Feature","Billboard","Details","Button","Footer","Contact","span","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ujCAIA,IA6EeA,EA7EM,SAAC,GAAwD,IAAtDC,EAAqD,EAArDA,SAAUC,EAA2C,EAA3CA,QAA2C,IAAlCC,kBAAkC,MAArB,GAAqB,MAAjBC,cAAiB,MAAR,EAAQ,IAEvCC,mBAAS,MAF8B,mBAEpEC,EAFoE,KAEpDC,EAFoD,OAGzCF,mBAAS,GAHgC,mBAGpEG,EAHoE,KAGzDC,EAHyD,OAI5CJ,mBAASD,GAJmC,mBAIpEM,EAJoE,KAIzDC,EAJyD,KAO3E,SAASC,IACFN,GAAmBA,EAAeO,OAClCJ,EACHK,KAAKC,KAAMC,OAAOC,YAAcD,OAAOE,WAAcZ,EAAeO,SAFvBJ,EAAa,GAM9DU,qBAAU,WAAM,4CACd,gCAAAC,EAAA,yDACOnB,EADP,iEAEqBoB,MAAM,6BAAD,OAA+BpB,EAA/B,YAF1B,cAEQqB,EAFR,gBAG4BA,EAAKC,OAHjC,gBAGUC,EAHV,EAGUA,QACRjB,EACEiB,EAAQC,KACLC,6BAA6BC,MAC7BC,KAAI,qBAAGC,KAAgBC,wBAP9B,6CADc,0DAYdC,KACC,CAAC9B,IAGJkB,oBAAUP,EAAc,CAACN,IAEzBU,OAAOgB,iBAAiB,SAAUpB,GAClCI,OAAOgB,iBAAiB,UAAU,kBAAMrB,EAAUP,EAASY,OAAOiB,QAAU,MAI5E,IAAMC,EAAYC,IAAOC,IAAV,IAMC1B,GAIV2B,EAAOF,IAAOC,IAAV,IACC5B,EACCA,GAKN8B,EAASH,IAAOC,IAAV,IAIUjC,EACgBA,EAAWoC,QAIjD,OACE,kBAACL,EAAD,KACI5B,GACAA,EAAesB,KAAI,SAAAY,GAAG,OACpB,kBAACH,EAAD,CAAMI,IAAMD,EAAI,GAAGE,KACjB,kBAACC,EAAD,CAAMD,IAAMF,EAAItC,GAAW,GAAGwC,IAAME,IAAI,oBAI9C,kBAACN,EAAD,QAcAK,EAAOR,IAAOU,IAAV,K,y+CClCKC,MAjDf,WACE,OACE,kBAACC,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,MAAM,WACZ,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAD,KACE,yBACET,IAAI,sGACJE,IAAI,cAER,kBAACQ,EAAA,EAAD,CAAYC,QAAQ,MAApB,uBAGA,kBAACC,EAAD,MACA,kBAACC,EAAA,EAAD,CAAYC,KAAK,2CACf,uBAAGC,UAAU,kBAAb,oBAIN,kBAAC,EAAD,CACExD,SAAS,oBACTE,WAAa,CAAC,kBAAmB,OAAQ,OAAQ,UACjDC,OAAS,KAEX,kBAACsD,EAAD,KACE,kBAACC,EAAD,KACE,kBAACC,EAAD,KACE,4CAAiB,qCACjB,4EAAiD,uBAAGJ,KAAK,2CAAR,eAEnD,kBAACK,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQT,QAAQ,YAAYJ,MAAM,YAAYO,KAAK,2CAAnD,YAGA,8OAAmN,uBAAGA,KAAK,gDAAR,sBAAnN,iGAIN,kBAACO,EAAD,KACE,kBAACC,EAAD,KACE,gDACA,qDAA0B,uBAAGR,KAAK,gDAAR,uBAC1B,+CAAoB,uBAAGA,KAAK,uCAAR,qBASxBT,EAAUZ,IAAOC,IAAV,KAEPsB,EAASvB,IAAOC,IAAV,KAONuB,EAAUxB,IAAOC,IAAV,KAYPwB,EAAYzB,IAAOC,IAAV,KAQTyB,EAAU1B,IAAOC,IAAV,KAQP2B,EAAS5B,IAAOC,IAAV,KAcN4B,EAAU7B,IAAOC,IAAV,KAKPkB,EAASnB,IAAO8B,KAAV,KAINd,EAAOhB,IAAO8B,KAAV,KC1GUC,QACW,cAA7BlD,OAAOmD,SAASC,UAEe,UAA7BpD,OAAOmD,SAASC,UAEhBpD,OAAOmD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b1d071e5.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst IGBackground = ({ username, quality, filterOpts = [], offset = 0 }) => {\n\n  const [imageResources, setImages] = useState(null);\n  const [imageDims, setImageDims] = useState(0);\n  const [topOffSet, setOffSet] = useState(offset);\n\n  // CALCULATE HOW WIDE THE TILES SHOULD BE\n  function getImageDims() {\n    if (!imageResources || !imageResources.length) setImageDims(0);\n    else setImageDims(\n      Math.sqrt((window.innerHeight * window.innerWidth) / imageResources.length)\n    );\n  }\n\n  useEffect(() => {  // LOADS POSTS WHEN USERNAME UPDATES\n    async function getMedia() {\n      if (!username) return;\n      const resp = await fetch(`https://www.instagram.com/${ username }/?__a=1`);\n      const { graphql } = await resp.json();\n      setImages(\n        graphql.user\n          .edge_owner_to_timeline_media.edges\n          .map(({ node }) => node.thumbnail_resources)\n      )\n    }\n\n    getMedia();\n  }, [username]);\n\n  // UPDATES TILE DIMENSIONS WHEN IG IMAGES LOAD\n  useEffect(getImageDims, [imageResources]);\n  // UPDATES TILE DIMENSIONS WHEN WINDOW RESIZES\n  window.addEventListener(\"resize\", getImageDims)\n  window.addEventListener(\"scroll\", () => setOffSet(offset - window.scrollY / 5))\n\n\n  // ROOT CONTAINER\n  const Container = styled.div`\n    position: fixed;\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    flex-wrap: wrap;\n    margin-top: ${topOffSet }px;\n  `\n\n  // PARENT TILE FOR IMAGES\n  const Tile = styled.div`\n    width: ${imageDims }px;\n    height: ${imageDims }px;\n    flex-grow: 1;\n  `\n\n  // CREATES A FILTER OVER TOP\n  const Filter = styled.div`\n    position: absolute;\n    width: 100vw;\n    height: 100vh;\n    background-color: ${filterOpts }; /* USED IF ONE COLOR PASSED */\n    background-image: linear-gradient(${filterOpts.join() }); /* USED IF GRADIENT OPTS PASSED */\n    opacity: .7;\n  `\n\n  return (\n    <Container>\n      { imageResources &&\n        imageResources.map(res => (\n          <Tile key={ res[0].src }>\n            <Post src={ res[quality || 1].src } alt=\"recent post\" />\n          </Tile>\n        ))\n      }\n      <Filter />\n    </Container>\n  )\n}\n\nexport default IGBackground;\n\nIGBackground.propTypes = {\n  username: PropTypes.string.isRequired,\n  quality: PropTypes.number,\n  filterOpts: PropTypes.arrayOf(PropTypes.string),\n  offset: PropTypes.number\n}\n\nconst Post = styled.img`\n  height: 100%;\n  width: 100%;\n  object-fit: cover;\n`","import React from 'react';\nimport { AppBar, Toolbar, IconButton, Typography, Button } from '@material-ui/core';\nimport styled from 'styled-components';\n\nimport './App.css';\nimport IGBackground from './components/IGBackground';\n\nfunction App() {\n  return (\n    <Content>\n      <AppBar color=\"default\">\n        <Toolbar>\n          <Logo>\n            <img\n              src=\"https://cdn.discordapp.com/attachments/365602656812793857/643909979467808808/logos_ftc_textless.png\"\n              alt=\"ftc_logo\" />\n          </Logo>\n          <Typography variant=\"h6\">\n            Ferry Tale Creative\n          </Typography>\n          <Spacer />\n          <IconButton href=\"https://etsy.com/shop/FerryTaleCreative\">\n            <i className=\"material-icons\">shopping_cart</i>\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <IGBackground\n        username=\"ferrytalecreative\"\n        filterOpts={ [\"to bottom right\", \"teal\", \"blue\", \"purple\"] }\n        offset={ 55 }\n      />\n      <Banner>\n        <Feature>\n          <Billboard>\n            <h1>The store is <b>LIVE!</b></h1>\n            <h3>To shop our limited selection, check out our <a href=\"https://etsy.com/shop/FerryTaleCreative\">Etsy Shop</a></h3>\n          </Billboard>\n          <Details>\n            <Button variant=\"contained\" color=\"secondary\" href=\"https://etsy.com/shop/FerryTaleCreative\">\n              Shop now\n            </Button>\n            <p>Be sure to check back here in the New Year, January 1, and we will have a full catalog of exciting products for you to check out. Until then we'd love to connect with you so be sure to follow us on Instagram <a href=\"https://www.instagram.com/ferrytalecreative/\">@FerryTaleCreative</a> and check out our contact form in the Connect section if you have a questions or request.</p>\n          </Details>\n        </Feature>\n      </Banner>\n      <Footer>\n        <Contact>\n          <h4>Connect with us.</h4>\n          <p>Follow us on Instagram <a href=\"https://www.instagram.com/ferrytalecreative/\">@FerryTaleCreative</a></p>\n          <p>Have a question? <a href=\"https://forms.gle/t6NSqEZNVMPoU5Lm7\">Ask us here!</a></p>\n        </Contact>\n      </Footer>\n    </Content>\n  );\n}\n\nexport default App;\n\nconst Content = styled.div``\n\nconst Banner = styled.div`\n      height: 95vh;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n    `\n\nconst Feature = styled.div`\n      width: 90%;\n      max-width: 700px;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      height: 100%;\n      & a {\n        color: white;\n      }\n    `\n\nconst Billboard = styled.div`\n      color: white;\n      background: rgba(0, 0, 0, .2);\n      padding-left: 10px;\n      padding-bottom: 10px;\n      border-left: white solid;\n    `\n\nconst Details = styled.div`\n      width: 90%;\n      max-width: 600px;\n      color: white;\n      margin-top: 50px;\n      text-align: justify;\n    `\n\nconst Footer = styled.div`\n      min-height: 200px;\n      background-color: white;\n      display: flex;\n      justify-content: center;\n  & h4 {\n        margin: 15px 0px;\n    }\n  & p {\n        opacity: .7;\n        margin: 5px 0px;\n    }\n  `\n\nconst Contact = styled.div`\n    width: 90%;\n    max-width: 700px;\n  `\n\nconst Spacer = styled.span`\n    flex: 1;\n`\n\nconst Logo = styled.span`\n    width: 40px;\n`","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}